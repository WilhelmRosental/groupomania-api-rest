#!/usr/bin/env node

/**
 * Script d'initialisation des bases de donn√©es PostgreSQL pour Groupomania
 * Cr√©e les bases de donn√©es n√©cessaires pour l'architecture microservices
 */

const { Client } = require('pg');

// V√©rifier si un mot de passe est fourni (requis pour SCRAM)
if (process.env.DB_PASSWORD === undefined) {
  console.log('‚ö†Ô∏è  PostgreSQL utilise l\'authentification SCRAM qui n√©cessite un mot de passe.');
  console.log('üí° Essayez une de ces commandes :');
  console.log('   DB_PASSWORD="votre_mot_de_passe" npm run setup:db');
  console.log('   DB_PASSWORD="" npm run setup:db  # si pas de mot de passe');
  console.log('   DB_PASSWORD="postgres" npm run setup:db  # mot de passe par d√©faut');
  console.log('');
  console.log('üîç Pour trouver votre mot de passe PostgreSQL :');
  console.log('   1. V√©rifiez dans pgAdmin');
  console.log('   2. Ou testez avec: psql -U postgres -d postgres');
  process.exit(1);
}

// Configuration de connexion PostgreSQL
const config = {
  host: process.env.DB_HOST || 'localhost',
  port: parseInt(process.env.DB_PORT) || 5432,
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD,
  database: 'postgres', // Se connecter √† la base par d√©faut pour cr√©er les autres
  ssl: false, // D√©sactiver SSL pour les connexions locales
  connectionTimeoutMillis: 5000
};

// Bases de donn√©es √† cr√©er
const databases = [
  'groupomania_users',
  'groupomania_posts'
];

// Utilisateur applicatif (optionnel)
const appUser = {
  username: process.env.APP_DB_USER || 'groupomania',
  password: process.env.APP_DB_PASSWORD || 'groupomania123'
};

const createUser = process.env.CREATE_USER === 'true';

console.log('üöÄ Script d\'initialisation des bases de donn√©es Groupomania');
console.log('üìÅ Configuration:');
console.log(`   - Host: ${config.host}:${config.port}`);
console.log(`   - User: ${config.user}`);
console.log(`   - Databases: ${databases.join(', ')}`);
if (createUser) {
  console.log(`   - App User: ${appUser.username}`);
}
console.log('');

async function setupDatabases() {
  const client = new Client(config);

  try {
    console.log('üîó Connexion √† PostgreSQL...');
    await client.connect();
    console.log('‚úÖ Connexion r√©ussie !');

    // Cr√©er l'utilisateur applicatif si demand√©
    if (createUser) {
      console.log(`üë§ Cr√©ation de l'utilisateur ${appUser.username}...`);
      try {
        await client.query(`
          CREATE USER ${appUser.username} WITH PASSWORD '${appUser.password}';
        `);
        console.log(`‚úÖ Utilisateur ${appUser.username} cr√©√© avec succ√®s`);
      } catch (error) {
        if (error.code === '42710') { // User already exists
          console.log(`‚ö†Ô∏è  L'utilisateur ${appUser.username} existe d√©j√†`);
        } else {
          throw error;
        }
      }
    }

    // Cr√©er les bases de donn√©es
    for (const dbName of databases) {
      console.log(`üì¶ Cr√©ation de la base de donn√©es ${dbName}...`);
      
      try {
        await client.query(`CREATE DATABASE ${dbName};`);
        console.log(`‚úÖ Base de donn√©es ${dbName} cr√©√©e avec succ√®s`);
      } catch (error) {
        if (error.code === '42P04') { // Database already exists
          console.log(`‚ö†Ô∏è  La base de donn√©es ${dbName} existe d√©j√†`);
        } else {
          throw error;
        }
      }

      // Donner les permissions √† l'utilisateur applicatif
      if (createUser) {
        try {
          await client.query(`GRANT ALL PRIVILEGES ON DATABASE ${dbName} TO ${appUser.username};`);
          console.log(`‚úÖ Permissions accord√©es √† ${appUser.username} sur ${dbName}`);
        } catch (error) {
          console.log(`‚ö†Ô∏è  Erreur lors de l'attribution des permissions: ${error.message}`);
        }
      }
    }

    console.log('');
    console.log('üéâ Initialisation termin√©e avec succ√®s !');
    console.log('');
    console.log('üìã Prochaines √©tapes:');
    console.log('   1. npm run db:migrate:all  # Cr√©er les tables');
    console.log('   2. npm run db:seed:all     # Ins√©rer les donn√©es de test');
    console.log('   3. npm run dev:all         # D√©marrer les services');

  } catch (error) {
    console.error('‚ùå Erreur de connexion PostgreSQL:', error.message);
    console.log('');
    console.log('üí° Solutions possibles:');
    console.log('   - V√©rifiez que PostgreSQL est d√©marr√©');
    console.log('   - V√©rifiez le mot de passe avec: psql -U postgres');
    console.log('   - Changez le mot de passe: ALTER USER postgres PASSWORD \'nouveaumotdepasse\';');
    console.log('');
    console.log('üí° Variables d\'environnement disponibles:');
    console.log('   - DB_HOST (d√©faut: localhost)');
    console.log('   - DB_PORT (d√©faut: 5432)');
    console.log('   - DB_USER (d√©faut: postgres)');
    console.log('   - DB_PASSWORD (REQUIS)');
    console.log('   - CREATE_USER=true (pour cr√©er un utilisateur d√©di√©)');
    process.exit(1);
  } finally {
    await client.end();
  }
}

// Ex√©cuter le script
setupDatabases();