version: '3.8'

services:
  api-gateway:
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - LOG_PRETTY=false
      - API_GATEWAY_PORT=3000
      - USER_SERVICE_URL=http://user-service:3001
      - POST_SERVICE_URL=http://post-service:3002
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  user-service:
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - LOG_PRETTY=false
      - USER_SERVICE_PORT=3001
      - SERVICE_NAME=user-service
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${USER_DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_SSL=true
      - JWT_SECRET=${JWT_SECRET}
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 1024M
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  post-service:
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - LOG_PRETTY=false
      - POST_SERVICE_PORT=3002
      - SERVICE_NAME=post-service
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${POST_DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_SSL=true
      - JWT_SECRET=${JWT_SECRET}
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - post_images:/app/images:rw
    deploy:
      resources:
        limits:
          memory: 1024M
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    environment:
      - POSTGRES_DB=groupomania
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2048M
          cpus: '2.0'
        reservations:
          memory: 1024M
          cpus: '1.0'
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data:rw
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d groupomania"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 80s
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.7
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c log_min_duration_statement=1000
      -c log_connections=on
      -c log_disconnections=on
      -c log_lock_waits=on

volumes:
  postgres_data_prod:
    driver: local
  post_images:
    driver: local

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
